// Generated by CoffeeScript 1.8.0
(function() {
  var formatBody, fs, host, http, listDirectory, mime, path, port, root, server, showFile, url, write404;

  fs = require("fs");

  http = require("http");

  url = require("url");

  path = require("path");

  mime = require("./mime").mime;

  root = __dirname;

  host = "127.0.0.1";

  port = "8888";

  if (!fs.existsSync(root)) {
    console.log(root + "文件夹不存在，请重新制定根文件夹！");
    process.exit();
  }

  listDirectory = function(parentDirectory, req, res) {
    return fs.readdir(parentDirectory, function(error, files) {
      var body;
      files = (function(files) {
        var file, ret, _i, _len;
        ret = [];
        for (_i = 0, _len = files.length; _i < _len; _i++) {
          file = files[_i];
          if (file.match(/^[^\.]/)) {
            ret.push(file);
          }
        }
        return ret;
      })(files);
      body = formatBody(parentDirectory, files);
      res.writeHead(200, {
        "Content-Type": "text/html;charset=utf-8",
        "Content-Length": Buffer.byteLength(body, 'utf8'),
        "Server": "NodeJs(" + process.version + ")"
      });
      res.write(body, 'utf8');
      return res.end();
    });
  };

  showFile = function(file, req, res) {
    return fs.readFile(file, 'binary', function(err, file) {
      var contentType;
      contentType = mime.lookupExtension(path.extname(file));
      res.writeHead(200, {
        "Content-Type": contentType,
        "Content-Length": Buffer.byteLength(file, 'binary'),
        "Server": "NodeJs(" + process.version + ")"
      });
      res.write(file, "binary");
      return res.end();
    });
  };

  formatBody = function(parent, files) {
    var length;
    length = files.length;
    return '<!doctype>\n<html>\n	<head>\n		<meta http-equiv=\'Content-Type\' content=\'text/html;charset=utf-8\'></meta>\n 			<title>CofeeMobile 服务器</title>\n	</head>\n	<body width=\'100%\'>\n		<div style=\'position:relative;width:98%;bottom:5px;height:25px;background:#A3BF00\'>\n			<div style=\'margin:10 auto;height:100%;line-height:25px;text-align:left\'>' + parent + '</div>\n</div>\n<ul>\n' + (parent !== root ? "<li><a href='../'>" + "../" + "</a></li>" : "") + (function(flies) {
      var file, _i, _len, _results;
      _results = [];
      for (_i = 0, _len = files.length; _i < _len; _i++) {
        file = files[_i];
        _results.push((function(file) {
          var stat;
          stat = fs.statSync(path.join(parent, file));
          file = stat.isDirectory(file) ? path.basename(file) + "/" : path.basename(file);
          return "<li><a href='" + file + "'>" + file + "</a></li>";
        })(file));
      }
      return _results;
    })(files).join('') + '		</ul>\n		<div style=\'position:relative;width:98%;bottom:5px;height:25px;background:gray\'>\n			<div style=\'margin:0 auto;height:100%;line-height:25px;text-align:center\'>Powered By Node.js</div>\n		</div>\n	</body>\n</html>';
  };

  write404 = function(req, res) {
    var body;
    body = "文件不存在:-(";
    res.writeHead(404, {
      "Content-Type": "text/html;charset=utf-8",
      "Content-Length": Buffer.byteLength(body, 'utf8'),
      "Server": "NodeJs(" + process.version + ")"
    });
    res.write(body);
    return res.end();
  };

  server = http.createServer(function(req, res) {
    var filename, pathname, re;
    pathname = url.parse(req.url).pathname.replace(/%20/g, ' ');
    re = /(%[0-9A-Fa-f]{2}){3}/g;
    pathname = pathname.replace(re, function(word) {
      var array, buffer;
      buffer = new Buffer(3);
      array = word.split('%');
      array.splice(0, 1);
      array.forEach(function(val, index) {
        return buffer[index] = parseInt('0x' + val, 16);
      });
      return buffer.toString('utf8');
    });
    console.log(pathname);
    if (pathname === '/') {
      return listDirectory(root, req, res);
    } else {
      filename = path.join(root, pathname);
      return fs.exists(filename, function(exists) {
        if (!exists) {
          console.log('找不到文件' + filename);
          return write404(req, res);
        } else {
          return fs.stat(filename, function(err, stat) {
            if (stat.isFile()) {
              showFile(filename, req, res);
            }
            if (stat.isDirectory()) {
              return listDirectory(filename, req, res);
            }
          });
        }
      });
    }
  });

  server.listen(port, host);

  console.log("服务器开始运行 http://" + host + ":" + port);

}).call(this);
